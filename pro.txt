Task 3: Proxy
Create a proxy class for accessing a sensitive object that contains a secret key. The proxy should only allow access to the secret key if a correct password is provided.
 
Task 4: Strategy
Develop a Context class that can use different SortingStrategy algorithms interchangeably to sort a collection of numbers

aaaa by Maria (Guest)
Maria (Guest)
4:26 PM
aaaa
package com.structuraldesignpattern;   int... by Maria (Guest)
Maria (Guest)
4:26 PM
package com.structuraldesignpattern;
 
interface Subject {
    void request();
}
 
class RealSubject implements Subject {
    public void request() {
        System.out.println("RealSubject request");
    }
}
 
public class Proxy implements Subject {
    private RealSubject realSubject;
 
    public void request() {
        if (realSubject == null) {
            realSubject = new RealSubject();
        }
        realSubject.request();
    }
}
 
aaaa by Maria (Guest)
Maria (Guest)
4:26 PM
aaaa
package com.behavioralpatterns;   /* * Sep... by Maria (Guest)
Maria (Guest)
4:27 PM
package com.behavioralpatterns;
 
/*
* Separates Strategy - how you do something - into a separate class.
* Allows easy change of strategy at a later point.
*/
public class StrategyPattern {
	interface Sortable {
		public int[] sort(int[] numbers);
	}
 
	static class BubbleSort implements Sortable {
		public int[] sort(int[] numbers) {
			// Ideally the bubble sort is implemented completely here
			return numbers;
		}
	}
 
	static class QuickSort implements Sortable {
		@Override
		public int[] sort(int[] numbers) {
			// Ideally the quick sort is implemented completely here
			return numbers;
		}
	}
 
	static class ComplexClass {
		Sortable sorter;
 
		ComplexClass(Sortable sorter) {
			this.sorter = sorter;
		}
 
		void doAComplexThing() {
			int[] values = null; // get from somewhere..
			// ..logic..
			sorter.sort(values);
			// ..logic..
		}
	}
 
	public static void main(String[] args) {
		ComplexClass complexClassInstance = new ComplexClass(new BubbleSort());
		// This can also be a setter..
		complexClassInstance.doAComplexThing();
	}
}
 
Recording has stopped. Saving recording…
4:28 PM Recording has stopped. Saving recording…
Recording has started
4:28 PM Recording has started
has context menu