[10:14 AM] Maria
package com.backtrackingalgorithms;
 
public class NQueenProblem {
	  final int N = 8;
 
	    // Function to print the solution board
	    void printSolution(int board[][]) {
	        for (int i = 0; i < N; i++) {
	            for (int j = 0; j < N; j++) {
	                System.out.print(" " + board[i][j] + " ");
	            }
	            System.out.println();
	        }
	    }
 
	    // Function to check if a queen can be placed on board[row][col]
	    boolean isSafe(int board[][], int row, int col) {
	        int i, j;
 
	        // Check this row on left side
	        for (i = 0; i < col; i++) {
	            if (board[row][i] == 1) {
	                return false;
	            }
	        }
 
	        // Check upper diagonal on left side
	        for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
	            if (board[i][j] == 1) {
	                return false;
	            }
	        }
 
	        // Check lower diagonal on left side
	        for (i = row, j = col; j >= 0 && i < N; i++, j--) {
	            if (board[i][j] == 1) {
	                return false;
	            }
	        }
 
	        return true;
	    }
 
	    // A recursive utility function to solve N Queen problem
	    boolean solveNQUtil(int board[][], int col) {
	        // If all queens are placed then return true
	        if (col >= N) {
	            return true;
	        }
 
	        // Try placing this queen in all rows one by one
	        for (int i = 0; i < N; i++) {
	            // Check if the queen can be placed on board[i][col]
	            if (isSafe(board, i, col)) {
	                // Place this queen in board[i][col]
	                board[i][col] = 1;
 
	                // Recur to place rest of the queens
	                if (solveNQUtil(board, col + 1) == true) {
	                    return true;
	                }
 
	                // If placing queen in board[i][col] doesn't lead to a solution
	                // then remove queen from board[i][col]
	                board[i][col] = 0; // BACKTRACK
	            }
	        }
 
	        // If the queen cannot be placed in any row in this column col
	        return false;
	    }
 
	    // This function solves the N Queen problem using Backtracking.
	    // It mainly uses solveNQUtil() to solve the problem. It returns false if queens
	    // cannot be placed, otherwise returns true and prints the placement of queens
	    // in the form of 1s. Please note that there may be more than one solutions,
	    // this function prints one of the feasible solutions.
	    boolean solveNQ() {
	        int board[][] = {
	            { 0, 0, 0, 0, 0, 0, 0, 0 },
	            { 0, 0, 0, 0, 0, 0, 0, 0 },
	            { 0, 0, 0, 0, 0, 0, 0, 0 },
	            { 0, 0, 0, 0, 0, 0, 0, 0 },
	            { 0, 0, 0, 0, 0, 0, 0, 0 },
	            { 0, 0, 0, 0, 0, 0, 0, 0 },
	            { 0, 0, 0, 0, 0, 0, 0, 0 },
	            { 0, 0, 0, 0, 0, 0, 0, 0 }
	        };
 
	        if (solveNQUtil(board, 0) == false) {
	            System.out.print("Solution does not exist");
	            return false;
	        }
 
	        printSolution(board);
	        return true;
	    }
 
	    // Driver program to test above function
	    public static void main(String args[]) {
	        NQueenProblem Queen = new NQueenProblem();
	        Queen.solveNQ();
	    }
}
 
[10:16 AM] Maria
Task 1: The Knightâ€™s Tour Problem

Create a function bool SolveKnightsTour(int[,] board, int moveX, int moveY, int moveCount, int[] xMove, int[] yMove) that attempts to solve the Knight's Tour problem using backtracking. The function should return true if a solution exists and false otherwise. The board represents the chessboard, moveX and moveY are the current coordinates of the knight, moveCount is the current move count, and xMove[], yMove[] are the possible next moves for the knight. Fill the chessboard such that the knight visits every square exactly once. Keep the  chessboard size to 8x8.
 
Task 2: Rat in a Maze

mplement a function bool SolveMaze(int[,] maze) that uses backtracking to find a path from the top left corner to the bottom right corner of a maze. The maze is represented by a 2D array where 1s are paths and 0s are walls. Find a rat's path through the maze. The maze size is 6x6.
 
Task 3: N Queen Problem

Write a function bool SolveNQueen(int[,] board, int col) in Java

that places N queens on an N x N chessboard so that no two 

queens attack each other using backtracking. 

Place N queens on the board such that no two queens can attack each other.

Use a standard 8x8 chessboard.
[10:17 AM] Maria
aaaaa
[10:17 AM] Maria
package com.backtrackingalgorithms;
 
public class KnightsTour {
	 private static final int[] dx = {2, 1, -1, -2, -2, -1, 1, 2};
	    private static final int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};
	    private static final int N = 8;
 
	    public static void main(String[] args) {
	        solveKnightsTour();
	    }
 
	    private static void solveKnightsTour() {
	        int[][] board = new int[N][N];
 
	        // Initialize the board with -1 indicating unvisited squares
	        for (int i = 0; i < N; i++) {
	            for (int j = 0; j < N; j++) {
	                board[i][j] = -1;
	            }
	        }
 
	        // Knight starts at the first block
	        board[0][0] = 0;
 
	        if (solveKTUtil(0, 0, 1, board)) {
	            printSolution(board);
	        } else {
	            System.out.println("Solution does not exist");
	        }
	    }
 
	    private static boolean solveKTUtil(int x, int y, int movei, int[][] board) {
	        if (movei == N * N) {
	            return true;
	        }
 
	        for (int k = 0; k < 8; k++) {
	            int nextX = x + dx[k];
	            int nextY = y + dy[k];
	            if (isSafe(nextX, nextY, board)) {
	                board[nextX][nextY] = movei;
	                if (solveKTUtil(nextX, nextY, movei + 1, board)) {
	                    return true;
	                } else {
	                    board[nextX][nextY] = -1; // backtracking
	                }
	            }
	        }
	        return false;
	    }
 
	    private static boolean isSafe(int x, int y, int[][] board) {
	        return (x >= 0 && x < N && y >= 0 && y < N && board[x][y] == -1);
	    }
 
	    private static void printSolution(int[][] board) {
	        for (int i = 0; i < N; i++) {
	            for (int j = 0; j < N; j++) {
	                System.out.printf("%2d ", board[i][j]);
	            }
	            System.out.println();
	        }
	    }
}
 