1) Create a CustomStack class with operations Push, Pop, Peek, and IsEmpty. Demonstrate its LIFO behavior by pushing integers onto the stack, then popping and displaying them until the stack is empty. in java using exceptional handling

import java.util.EmptyStackException;

class CustomStack {
    private int maxSize;
    private int[] stackArray;
    private int top;

    public CustomStack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1;
    }

    public void push(int value) throws StackOverflowException {
        if (isFull()) {
            throw new StackOverflowException("Stack is full. Cannot push more elements.");
        }
        stackArray[++top] = value;
    }

    public int pop() throws StackUnderflowException {
        if (isEmpty()) {
            throw new StackUnderflowException("Stack is empty. Cannot pop elements.");
        }
        return stackArray[top--];
    }

    public int peek() throws EmptyStackException {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stackArray[top];
    }

    public boolean isEmpty() {
        return (top == -1);
    }

    public boolean isFull() {
        return (top == maxSize - 1);
    }
}

class StackOverflowException extends Exception {
    public StackOverflowException(String message) {
        super(message);
    }
}

class StackUnderflowException extends Exception {
    public StackUnderflowException(String message) {
        super(message);
    }
}

public class Main {
    public static void main(String[] args) {
        CustomStack stack = new CustomStack(5);

        try {
            stack.push(1);
            stack.push(2);
            stack.push(3);
            stack.push(4);
            stack.push(5);

            System.out.println("Popping elements from the stack:");

            while (!stack.isEmpty()) {
                System.out.println(stack.pop());
            }

            // Trying to pop from an empty stack
            stack.pop();
        } catch (StackOverflowException e) {
            System.out.println("Stack Overflow: " + e.getMessage());
        } catch (StackUnderflowException e) {
            System.out.println("Stack Underflow: " + e.getMessage());
        }
    }
}
