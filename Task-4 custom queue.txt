2) Develop a CustomQueue class with methods for Enqueue, Dequeue, Peek, and IsEmpty. Show how your queue can handle different data types by enqueuing strings and integers, then dequeuing and displaying them to confirm FIFO order.

import java.util.LinkedList;
import java.util.Queue;
import java.util.NoSuchElementException;

class CustomQueue<T> {
    private Queue<T> queue;

    public CustomQueue() {
        queue = new LinkedList<>();
    }

    public void enqueue(T item) {
        queue.add(item);
    }

    public T dequeue() throws NoSuchElementException {
        return queue.remove();
    }

    public T peek() throws NoSuchElementException {
        return queue.element();
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }
}

public class Main {
    public static void main(String[] args) {
        CustomQueue<Object> queue = new CustomQueue<>();

        // Enqueuing integers
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);

        // Enqueuing strings
        queue.enqueue("Hello");
        queue.enqueue("World");

        // Dequeuing and displaying elements
        while (!queue.isEmpty()) {
            System.out.println(queue.dequeue());
        }
    }
}
