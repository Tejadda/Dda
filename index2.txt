console.log('Start');
 
function wait(milliseconds) {
    const start = Date.now();
    while (Date.now() - start < milliseconds) {
        // This loop blocks the execution
    }
}
 
wait(2000); // Wait for 2 seconds
 
console.log('End');
/* output
Start
(Waits for 2 seconds)
End
*/
above is Sync.js by Maria (Guest)
Maria (Guest)
12:39 PM
above is Sync.js
console.log('Start');   function fetchData(... by Maria (Guest)
Maria (Guest)
12:40 PM
console.log('Start');
 
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('Data fetched');
        }, 2000);
    });
}
 
fetchData()
    .then((message) => {
        console.log(message);
    })
    .catch((error) => {
        console.error(error);
    });
 
console.log('End');
 
/*
output
 
Start
End
(Waits for 2 seconds)
Data fetched
 
Here, fetchData returns a promise that resolves after 2 seconds. The then method is used to handle the resolved value, while catch can handle any errors.
*/
above is promises by Maria (Guest)
Maria (Guest)
12:40 PM
above is promises
console.log('Start');   function fetchData(... by Maria (Guest)
Maria (Guest)
12:40 PM
console.log('Start');
 
function fetchData(callback) {
    setTimeout(() => {
        callback('Data fetched');
    }, 2000);
}
 
fetchData((message) => { console.log(message);});
 
console.log('End');
 
/*
output
 
Start
End
(Waits for 2 seconds)
Data fetched
 
 
In this example, setTimeout is used to simulate an asynchronous operation. The fetchData function takes a callback and calls it after 2 seconds, allowing console.log('End') to run immediately.
*/
above is callback by Maria (Guest)
Maria (Guest)
12:40 PM
above is callback
console.log('Start');   function fetchData(... by Maria (Guest)
Maria (Guest)
12:41 PM
console.log('Start');
 
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => { resolve('Data fetched');}, 2000);
    });
}
 
async function getData() {
    const message = await fetchData();
    console.log(message);
}
 
getData();
 
console.log('End');
 
/* output
Start
End
(Waits for 2 seconds)
Data fetched
 
In this example, getData is an async function that waits for fetchData to resolve before logging the message. This allows console.log('End') to run immediately, just like in the previous examples.
*/
 
// classes, interfaces,oops,constructor,private , static fields and methods
above is await by Maria (Guest)
Maria (Guest)
12:41 PM
above is await
has context menu